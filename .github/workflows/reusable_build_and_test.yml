name: CI

on:
  workflow_call:
    inputs:
      tag:
        description: 'Tag for the Docker images'
        required: true
        type: string
      acs_version:
        description: 'Version of ACS to build'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  REGISTRY_NAMESPACE: alfresco
  TAG: ${{ inputs.tag }}
  ACS_DEPLOYMENT_VERSION: 79a4d3c4facc9912a5f3990144488ba0da965dfc

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: Alfresco/alfresco-build-tools/.github/actions/free-hosted-runner-disk-space@v8.14.0

      - name: Setup nexus authentication
        env:
          NETRC_PATH: ~/.netrc
        run: |
          touch ${{ env.NETRC_PATH }}
          chmod 600 ${{ env.NETRC_PATH }}
          echo "machine nexus.alfresco.com" >> ${{ env.NETRC_PATH }}
          echo "login ${{ secrets.NEXUS_USERNAME }}" >> ${{ env.NETRC_PATH }}
          echo "password ${{ secrets.NEXUS_PASSWORD }}" >> ${{ env.NETRC_PATH }}

      - name: Restore packages artifacts
        uses: actions/cache/restore@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        id: artifacts-cache
        env:
          HASH_FILES_NAME: '**/artifacts-${{ inputs.acs_version }}*.yaml'
        with:
          key: ${{ runner.os }}-packages-v2-${{ hashFiles(env.HASH_FILES_NAME) }}-${{ inputs.acs_version }}
          path: artifacts_cache/**

      - name: Fetch artifacts from nexus
        env:
          ACS_VERSION: ${{ inputs.acs_version }}
        run: |
          python3 ./scripts/fetch_artifacts.py

      - name: Fetch artifacts for testing
        env:
          ACS_VERSION: "${{ inputs.acs_version }}-test"
        run: |
          python3 ./scripts/fetch_artifacts.py

      - name: Save packages artifacts
        if: steps.artifacts-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          key: ${{ steps.artifacts-cache.outputs.cache-primary-key }}
          path: artifacts_cache/**

      - name: Set up QEMU
        uses: docker/setup-qemu-action@4574d27a4764455b42196d70a065bc6853246a25 # v3.4.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca # v3.9.0

      - name: Login to Quay.io
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Log in to the Container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

      - name: Collect Workflow Telemetry
        uses: catchpoint/workflow-telemetry-action@94c3c3d9567a0205de6da68a76c428ce4e769af1 # v2.0.0
        with:
          comment_on_pr: false

      - name: Enumerate bake targets
        id: bake-targets
        env:
          ACS_VERSION: ${{ inputs.acs_version }}
        uses: docker/bake-action/subaction/list-targets@7bff531c65a5cda33e52e43950a795b91d450f63  # v6.3.0
        with:
          target: default

      - name: Enumerate registry cache targets
        id: cache-targets
        env:
          CACHE_TARGET: ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/bakery-cache
        run: |
          echo 'cache-set<<EOF' >> $GITHUB_OUTPUT
          echo '${{ steps.bake-targets.outputs.targets }}' | jq -r '.[] | '\
          '"\(.).cache-from=type=registry,ref=${{ env.CACHE_TARGET }}:${{ inputs.tag }}-\(.)\n'\
          '\(.).cache-from=type=registry,ref=${{ env.CACHE_TARGET }}:${{ github.event.repository.default_branch }}-v${{ inputs.acs_version }}-\(.)\n'\
          '\(.).cache-to=type=registry,ref=${{ env.CACHE_TARGET }}:${{ inputs.tag }}-\(.)"' >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Determine the tomcat version
        env:
          TOMCAT_VERSIONS_FILE: "tomcat/tomcat_versions.yaml"
        run: |
          if [[ ${{ inputs.acs_version }} == "23" ]]; then
            tomcat_field="tomcat10"
          else
            tomcat_field="tomcat9"
          fi
          echo "TOMCAT_MAJOR=$(yq e ".${tomcat_field}.major" ${{ env.TOMCAT_VERSIONS_FILE }})" >> $GITHUB_ENV
          echo "TOMCAT_VERSION=$(yq e ".${tomcat_field}.version" ${{ env.TOMCAT_VERSIONS_FILE }})" >> $GITHUB_ENV
          echo "TOMCAT_SHA512=$(yq e ".${tomcat_field}.sha512"  ${{ env.TOMCAT_VERSIONS_FILE }})" >> $GITHUB_ENV

      - name: Bake Docker images
        env:
          ACS_VERSION: ${{ inputs.acs_version }}
          TARGETARCH: ${{ inputs.acs_version == '23' && 'linux/amd64,linux/arm64' || 'linux/amd64' }}
        uses: docker/bake-action@7bff531c65a5cda33e52e43950a795b91d450f63  # v6.3.0
        with:
          source: .
          set: |
            *.output=type=registry,push=true
            ${{ steps.cache-targets.outputs.cache-set }}

  build-matrix:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      compose_matrix_json: ${{ steps.set-matrix.outputs.compose_matrix_json }}
      helm_matrix_json: ${{ steps.set-matrix.outputs.helm_matrix_json }}
    steps:
      - name: Set matrix values for Compose and Helm
        id: set-matrix
        run: |
          if [[ "${{ inputs.acs_version }}" == "23" ]]; then
            echo 'compose_matrix_json={"edition": ["enterprise", "community"]}' >> $GITHUB_OUTPUT
            echo 'helm_matrix_json={"arch": ["arm64", "amd64"], "edition": ["enterprise", "community"]}' >> $GITHUB_OUTPUT
          elif [[ "${{ inputs.acs_version }}" == "74" ]]; then
            echo 'compose_matrix_json={"edition": ["74"]}' >> $GITHUB_OUTPUT
            echo 'helm_matrix_json={"arch": ["amd64"], "edition": ["74"]}' >> $GITHUB_OUTPUT
          elif [[ "${{ inputs.acs_version }}" == "73" ]]; then
            echo 'compose_matrix_json={"edition": ["73"]}' >> $GITHUB_OUTPUT
            echo 'helm_matrix_json={"arch": ["amd64"], "edition": ["73"]}' >> $GITHUB_OUTPUT
          fi

  compose-test:
    needs: build-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build-matrix.outputs.compose_matrix_json) }}
    env:
      MERGED_COMPOSE_PATH: test/merged-compose.yaml
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Log in to the Container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca  # v3.9.0

      - name: Checkout acs-deployment sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: Alfresco/acs-deployment
          ref: ${{ env.ACS_DEPLOYMENT_VERSION  }}
          path: acs-deployment

      - name: Set path to compose files
        id: set-compose-path
        run: |
          if [[ "${{ matrix.edition }}" == "74" ]]; then
            echo "UPSTREAM_COMPOSE_PATH=7.4.N-compose.yaml" >> $GITHUB_ENV
            echo "OVERRIDE_COMPOSE_PATH=solr-search-override.yaml" >> $GITHUB_ENV
          elif [[ "${{ matrix.edition }}" == "73" ]]; then
            echo "UPSTREAM_COMPOSE_PATH=7.3.N-compose.yaml" >> $GITHUB_ENV
            echo "OVERRIDE_COMPOSE_PATH=solr-search-override.yaml" >> $GITHUB_ENV
          elif [[ "${{ matrix.edition }}" == "community" ]]; then
            echo "UPSTREAM_COMPOSE_PATH=community-compose.yaml" >> $GITHUB_ENV
            echo "OVERRIDE_COMPOSE_PATH=community-override.yaml" >> $GITHUB_ENV
          else
            echo "UPSTREAM_COMPOSE_PATH=compose.yaml" >> $GITHUB_ENV
            echo "OVERRIDE_COMPOSE_PATH=enterprise-override.yaml" >> $GITHUB_ENV
          fi

      - name: Merge Docker Compose files
        run: |
          cp -r acs-deployment/docker-compose/* test/
          docker compose -f test/${{ env.UPSTREAM_COMPOSE_PATH }} -f test/${{ env.OVERRIDE_COMPOSE_PATH }} config > ${{ env.MERGED_COMPOSE_PATH }}
          cat ${{ env.MERGED_COMPOSE_PATH }}

      - name: Verify docker-compose (${{ matrix.edition }})
        id: verify_compose
        uses: Alfresco/alfresco-build-tools/.github/actions/dbp-charts/verify-compose@v8.14.0
        timeout-minutes: 10
        with:
          postman_path: test/postman/docker-compose
          postman_json: acs-test-docker-compose-collection.json
          compose_file_path: ${{ env.MERGED_COMPOSE_PATH }}
          quay_username: ${{ secrets.QUAY_USERNAME }}
          quay_password: ${{ secrets.QUAY_PASSWORD }}

      - name: Save containers logs (${{ matrix.edition }})
        if: always() && steps.verify_compose.outcome != 'skipped'
        uses: Alfresco/alfresco-build-tools/.github/actions/docker-dump-containers-logs@v8.14.0
        with:
          output-archive-name: compose-${{ matrix.edition }}-logs-${{ inputs.acs_version }}

  helm-test:
    needs: build-matrix
    runs-on: ${{ matrix.arch == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build-matrix.outputs.helm_matrix_json) }}
    steps:
      - name: Setup cluster
        uses: Alfresco/alfresco-build-tools/.github/actions/setup-kind@v8.14.0
        with:
          ingress-nginx-ref: controller-v1.8.2
          metrics: "true"

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: azure/setup-helm@fe7b79cd5ee1e45176fcad797de68ecaf3ca4814 # v4.2.0
        with:
          version: "3.15.2"

      - name: Login to Quay.io
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567  # v3.3.0
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Log in to the Container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create registries auth secret
        run: >-
          kubectl create secret generic regcred
          --from-file=.dockerconfigjson=$HOME/.docker/config.json
          --type=kubernetes.io/dockerconfigjson

      - name: Create configmaps for adf apps
        run: |
          kubectl create configmap acc-config --from-file=app.config.json=test/configs/acc.json
          kubectl create configmap adw-config --from-file=app.config.json=test/configs/adw.json

      - name: Checkout acs-deployment sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: Alfresco/acs-deployment
          ref: ${{ env.ACS_DEPLOYMENT_VERSION  }}
          path: acs-deployment

      - name: Setup helm repository
        working-directory: acs-deployment/helm/alfresco-content-services
        run: |
          helm repo add self https://alfresco.github.io/alfresco-helm-charts/
          helm repo add activiti https://activiti.github.io/activiti-cloud-helm-charts
          helm repo add bitnami https://raw.githubusercontent.com/bitnami/charts/archive-full-index/bitnami/
          helm repo add elastic https://helm.elastic.co
          helm dependency build

      - name: Preprocess test-overrides.yaml
        env:
          OVERRIDES_VALUES_FILE: test/helm/test-overrides.yaml
        run: |
          sed -i "s|localhost/alfresco/|${REGISTRY}/${REGISTRY_NAMESPACE}/|g" ${{ env.OVERRIDES_VALUES_FILE }}
          sed -i "s|tag: latest|tag: ${TAG}|g" ${{ env.OVERRIDES_VALUES_FILE }}

          if [ "${{ matrix.edition }}" = "community" ]; then
            sed -i "s|/alfresco-content-repository|/alfresco-content-repository-community|g" ${{ env.OVERRIDES_VALUES_FILE }}
            sed -i "s|/alfresco-share|/alfresco-share-community|g" ${{ env.OVERRIDES_VALUES_FILE }}
          fi

          cat ${{ env.OVERRIDES_VALUES_FILE }}

      - name: Set path to compose files
        id: set-helm-values
        run: |
          if [[ "${{ matrix.edition }}" == "74" ]]; then
            echo "UPSTREAM_HELM_VALUES=7.4.N_values.yaml" >> $GITHUB_ENV
          elif [[ "${{ matrix.edition }}" == "73" ]]; then
            echo "UPSTREAM_HELM_VALUES=7.3.N_values.yaml" >> $GITHUB_ENV
          elif [[ "${{ matrix.edition }}" == "community" ]]; then
            echo "UPSTREAM_HELM_VALUES=community_values.yaml" >> $GITHUB_ENV
          else
            echo "UPSTREAM_HELM_VALUES=values.yaml" >> $GITHUB_ENV
          fi

      - name: Helm install
        id: helm_install
        run: |
          helm install acs ./acs-deployment/helm/alfresco-content-services \
            --set global.search.sharedSecret="$(openssl rand -hex 24)" \
            --set global.known_urls=http://localhost \
            --set global.alfrescoRegistryPullSecrets=regcred \
            --values ./acs-deployment/helm/alfresco-content-services/${{ env.UPSTREAM_HELM_VALUES }} \
            --values ./acs-deployment/test/${{ matrix.edition == 'community' && 'community' || 'enterprise' }}-integration-test-values.yaml \
            --values test/helm/test-overrides.yaml \
            --values test/helm/test-overrides-${{ matrix.edition }}.yaml

      - name: Wait for pods to be ready
        uses: Alfresco/alfresco-build-tools/.github/actions/kubectl-wait@v8.16.0

      - name: Run helm test
        id: helm_test
        env:
          HELM_TEST_TIMEOUT: 20m
        run: helm test acs --timeout=${{ env.HELM_TEST_TIMEOUT }}

      - name: Debug cluster status after helm test
        if: always() && steps.helm_test.outcome != 'skipped'
        run: |
          kubectl logs -l app.kubernetes.io/component=dtas --tail=-1
          kubectl get all --all-namespaces
          kubectl describe pod

      - name: Collect logs from all containers
        if: always() && steps.helm_install.outcome != 'skipped'
        run: |
          mkdir -p logs
          for pod in $(kubectl get pods -n default -o jsonpath='{.items[*].metadata.name}'); do
            kubectl logs $pod -n default > logs/${pod}.log
          done

      - name: Upload logs as artifact
        if: always() && steps.helm_install.outcome != 'skipped'
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 #v4.6.0
        with:
          name: k8s-logs-${{ matrix.arch }}-${{ matrix.edition }}
          path: logs
