name: CI

on:
  workflow_call:
    inputs:
      tag:
        description: 'Tag for the Docker images'
        required: true
        type: string
      acs_version:
        description: 'Version of ACS to build'
        required: true
        type: string
      aps_version:
        description: 'Version of APS to build'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  REGISTRY_NAMESPACE: alfresco
  TAG: ${{ inputs.tag }}

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: Alfresco/alfresco-build-tools/.github/actions/free-hosted-runner-disk-space@v8.22.1

      - name: Setup nexus authentication
        env:
          NETRC_PATH: ~/.netrc
        run: |
          touch ${{ env.NETRC_PATH }}
          chmod 600 ${{ env.NETRC_PATH }}
          echo "machine nexus.alfresco.com" >> ${{ env.NETRC_PATH }}
          echo "login ${{ secrets.NEXUS_USERNAME }}" >> ${{ env.NETRC_PATH }}
          echo "password ${{ secrets.NEXUS_PASSWORD }}" >> ${{ env.NETRC_PATH }}

      - name: Restore packages artifacts
        uses: actions/cache/restore@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        id: artifacts-cache
        env:
          HASH_FILES_NAME: '**/artifacts-${{ inputs.acs_version }}*.yaml'
        with:
          key: ${{ runner.os }}-packages-v2-${{ hashFiles(env.HASH_FILES_NAME) }}-${{ inputs.acs_version }}
          path: artifacts_cache/**

      - name: Fetch artifacts from nexus
        env:
          ACS_VERSION: ${{ inputs.acs_version }}
        run: |
          python3 ./scripts/fetch_artifacts.py

      - name: Fetch artifacts for testing
        env:
          ACS_VERSION: "${{ inputs.acs_version }}-test"
        run: |
          python3 ./scripts/fetch_artifacts.py

      - name: Save packages artifacts
        if: steps.artifacts-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          key: ${{ steps.artifacts-cache.outputs.cache-primary-key }}
          path: artifacts_cache/**

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Login to Quay.io
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Log in to the Container registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

      - name: Collect Workflow Telemetry
        uses: catchpoint/workflow-telemetry-action@94c3c3d9567a0205de6da68a76c428ce4e769af1 # v2.0.0
        with:
          comment_on_pr: false

      - name: Enumerate bake targets
        id: bake-targets
        env:
          ACS_VERSION: ${{ inputs.acs_version }}
          APS_VERSION: ${{ inputs.aps_version }}
        uses: docker/bake-action/subaction/list-targets@37816e747588cb137173af99ab33873600c46ea8  # v6.8.0
        with:
          target: default

      - name: Enumerate registry cache targets
        id: cache-targets
        env:
          CACHE_TARGET: ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/bakery-cache
        run: |
          echo 'cache-set<<EOF' >> $GITHUB_OUTPUT
          echo '${{ steps.bake-targets.outputs.targets }}' | jq -r '.[] | '\
          '"\(.).cache-from=type=registry,ref=${{ env.CACHE_TARGET }}:${{ inputs.tag }}-\(.)\n'\
          '\(.).cache-from=type=registry,ref=${{ env.CACHE_TARGET }}:${{ github.event.repository.default_branch }}-v${{ inputs.acs_version }}-\(.)\n'\
          '\(.).cache-to=type=registry,ref=${{ env.CACHE_TARGET }}:${{ inputs.tag }}-\(.)"' >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Determine the tomcat version
        env:
          TOMCAT_VERSIONS_FILE: "tomcat/tomcat_versions.yaml"
        run: |
          if [[ ${{ inputs.acs_version }} == 7* ]]; then
            tomcat_field="tomcat9"
          else
            tomcat_field="tomcat10"
          fi
          echo "TOMCAT_MAJOR=$(yq e ".${tomcat_field}.major" ${{ env.TOMCAT_VERSIONS_FILE }})" >> $GITHUB_ENV
          echo "TOMCAT_VERSION=$(yq e ".${tomcat_field}.version" ${{ env.TOMCAT_VERSIONS_FILE }})" >> $GITHUB_ENV
          echo "TOMCAT_SHA512=$(yq e ".${tomcat_field}.sha512"  ${{ env.TOMCAT_VERSIONS_FILE }})" >> $GITHUB_ENV

      - name: Bake Docker images
        env:
          ACS_VERSION: ${{ inputs.acs_version }}
          TARGETARCH: ${{ startsWith(inputs.acs_version, '7') && 'linux/amd64' || 'linux/amd64,linux/arm64' }}
        uses: docker/bake-action@37816e747588cb137173af99ab33873600c46ea8  # v6.8.0
        with:
          source: .
          set: |
            *.output=type=registry,push=true
            ${{ steps.cache-targets.outputs.cache-set }}

  build-matrix:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      compose_matrix_json: ${{ steps.set-matrix.outputs.compose_matrix_json }}
      helm_matrix_json: ${{ steps.set-matrix.outputs.helm_matrix_json }}
      aps_helm_matrix_json: ${{ steps.set-matrix.outputs.aps_helm_matrix_json }}
    steps:
      - name: Set matrix values for Compose and Helm
        id: set-matrix
        run: |
          case "${{ inputs.acs_version }}" in
            25)
              echo 'compose_matrix_json={"edition": ["enterprise", "community"]}' >> $GITHUB_OUTPUT
              echo 'helm_matrix_json={"arch": ["arm64", "amd64"], "edition": ["enterprise", "community"]}' >> $GITHUB_OUTPUT
              ;;
            23)
              echo 'compose_matrix_json={"edition": ["23"]}' >> $GITHUB_OUTPUT
              echo 'helm_matrix_json={"arch": ["arm64", "amd64"], "edition": ["23"]}' >> $GITHUB_OUTPUT
              ;;
            74)
              echo 'compose_matrix_json={"edition": ["74"]}' >> $GITHUB_OUTPUT
              echo 'helm_matrix_json={"arch": ["amd64"], "edition": ["74"]}' >> $GITHUB_OUTPUT
              ;;
            73)
              echo 'compose_matrix_json={"edition": ["73"]}' >> $GITHUB_OUTPUT
              echo 'helm_matrix_json={"arch": ["amd64"], "edition": ["73"]}' >> $GITHUB_OUTPUT
              ;;
          esac
          if [ -n "${{ inputs.aps_version }}" ] && [ "${{ inputs.aps_version }}" != "" ]; then
            case "${{ inputs.aps_version }}" in
              25)
                echo 'aps_helm_matrix_json={"arch": ["amd64"], "edition": ["25"]}' >> $GITHUB_OUTPUT
                ;;
              24)
                echo 'aps_helm_matrix_json={"arch": ["amd64"], "edition": ["24"]}' >> $GITHUB_OUTPUT
                ;;
            esac
          fi

  acs-compose-test:
    needs: build-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build-matrix.outputs.compose_matrix_json) }}
    env:
      MERGED_COMPOSE_PATH: test/merged-compose.yaml
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Login to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772  # v3.4.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to the Container registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout acs-deployment sources
        uses: ./.github/actions/acs-deployment

      - name: Set path to compose files
        id: set-compose-path
        run: |
          case "${{ matrix.edition }}" in
            enterprise)
              echo "UPSTREAM_COMPOSE_PATH=compose.yaml" >> $GITHUB_ENV
              echo "OVERRIDE_COMPOSE_PATH=enterprise-override.yaml" >> $GITHUB_ENV
              ;;
            23)
              echo "UPSTREAM_COMPOSE_PATH=23.N-compose.yaml" >> $GITHUB_ENV
              echo "OVERRIDE_COMPOSE_PATH=enterprise-override.yaml" >> $GITHUB_ENV
              ;;
            74)
              echo "UPSTREAM_COMPOSE_PATH=7.4.N-compose.yaml" >> $GITHUB_ENV
              echo "OVERRIDE_COMPOSE_PATH=solr-search-override.yaml" >> $GITHUB_ENV
              ;;
            73)
              echo "UPSTREAM_COMPOSE_PATH=7.3.N-compose.yaml" >> $GITHUB_ENV
              echo "OVERRIDE_COMPOSE_PATH=solr-search-override.yaml" >> $GITHUB_ENV
              ;;
            community)
              echo "UPSTREAM_COMPOSE_PATH=community-compose.yaml" >> $GITHUB_ENV
              echo "OVERRIDE_COMPOSE_PATH=community-override.yaml" >> $GITHUB_ENV
              ;;
          esac

      - name: Merge Docker Compose files
        run: |
          cp -r acs-deployment/docker-compose/* test/
          docker compose -f test/${{ env.UPSTREAM_COMPOSE_PATH }} -f test/${{ env.OVERRIDE_COMPOSE_PATH }} config > ${{ env.MERGED_COMPOSE_PATH }}
          cat ${{ env.MERGED_COMPOSE_PATH }}

      - name: Verify docker-compose (${{ matrix.edition }})
        id: verify_compose
        uses: Alfresco/alfresco-build-tools/.github/actions/dbp-charts/verify-compose@v8.22.1
        timeout-minutes: 10
        with:
          postman_path: test/postman/docker-compose
          postman_json: acs-test-docker-compose-collection.json
          compose_file_path: ${{ env.MERGED_COMPOSE_PATH }}
          quay_username: ${{ secrets.QUAY_USERNAME }}
          quay_password: ${{ secrets.QUAY_PASSWORD }}

      - name: Save containers logs (${{ matrix.edition }})
        if: always() && steps.verify_compose.outcome != 'skipped'
        uses: Alfresco/alfresco-build-tools/.github/actions/docker-dump-containers-logs@v8.22.1
        with:
          output-archive-name: compose-${{ matrix.edition }}-logs-${{ inputs.acs_version }}

  acs-helm-test:
    needs: build-matrix
    runs-on: ${{ matrix.arch == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build-matrix.outputs.helm_matrix_json) }}
    steps:
      - name: Setup cluster
        uses: Alfresco/alfresco-build-tools/.github/actions/setup-kind@v8.22.1
        with:
          ingress-nginx-ref: controller-v1.8.2
          metrics: "true"

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4.3.0
        with:
          version: "3.15.2"

      - name: Login to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772  # v3.4.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Quay.io
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772  # v3.4.0
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Log in to the Container registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create registries auth secret
        run: >-
          kubectl create secret generic regcred
          --from-file=.dockerconfigjson=$HOME/.docker/config.json
          --type=kubernetes.io/dockerconfigjson

      - name: Create configmaps for adf apps
        run: |
          kubectl create configmap acc-config --from-file=app.config.json=test/configs/acc.json
          kubectl create configmap adw-config --from-file=app.config.json=test/configs/adw.json

      - name: Checkout acs-deployment sources
        uses: ./.github/actions/acs-deployment

      - name: Setup helm repository
        working-directory: acs-deployment/helm/alfresco-content-services
        run: |
          helm repo add self https://alfresco.github.io/alfresco-helm-charts/
          helm repo add activiti https://activiti.github.io/activiti-cloud-helm-charts
          helm repo add bitnami https://raw.githubusercontent.com/bitnami/charts/archive-full-index/bitnami/
          helm repo add elastic https://helm.elastic.co
          helm dependency build

      - name: Preprocess test-overrides.yaml
        env:
          OVERRIDES_VALUES_FILE: test/helm/test-overrides.yaml
        run: |
          sed -i "s|localhost/alfresco/|${REGISTRY}/${REGISTRY_NAMESPACE}/|g" ${{ env.OVERRIDES_VALUES_FILE }}
          sed -i "s|tag: latest|tag: ${TAG}|g" ${{ env.OVERRIDES_VALUES_FILE }}

          if [ "${{ matrix.edition }}" = "community" ]; then
            sed -i "s|/alfresco-content-repository|/alfresco-content-repository-community|g" ${{ env.OVERRIDES_VALUES_FILE }}
            sed -i "s|/alfresco-share|/alfresco-share-community|g" ${{ env.OVERRIDES_VALUES_FILE }}
          fi

          cat ${{ env.OVERRIDES_VALUES_FILE }}

      - name: Set path to compose files
        id: set-helm-values
        run: |
          case "${{ matrix.edition }}" in
            enterprise)
              echo "UPSTREAM_HELM_VALUES=values.yaml" >> $GITHUB_ENV
              ;;
            23)
              echo "UPSTREAM_HELM_VALUES=23.N_values.yaml" >> $GITHUB_ENV
              ;;
            74)
              echo "UPSTREAM_HELM_VALUES=7.4.N_values.yaml" >> $GITHUB_ENV
              ;;
            73)
              echo "UPSTREAM_HELM_VALUES=7.3.N_values.yaml" >> $GITHUB_ENV
              ;;
            community)
              echo "UPSTREAM_HELM_VALUES=community_values.yaml" >> $GITHUB_ENV
              ;;
          esac

      - name: Helm install
        id: helm_install
        run: |
          helm install acs ./acs-deployment/helm/alfresco-content-services \
            --set global.search.sharedSecret="$(openssl rand -hex 24)" \
            --values ./acs-deployment/helm/alfresco-content-services/${{ env.UPSTREAM_HELM_VALUES }} \
            --values ./acs-deployment/test/${{ matrix.edition == 'community' && 'community' || 'enterprise' }}-integration-test-values.yaml \
            --values test/helm/test-overrides.yaml \
            --values test/helm/test-overrides-${{ matrix.edition }}.yaml

      - name: Wait for pods to be ready
        uses: Alfresco/alfresco-build-tools/.github/actions/kubectl-wait@v8.22.1

      - name: Run helm test
        id: helm_test
        env:
          HELM_TEST_TIMEOUT: 20m
        run: helm test acs --timeout=${{ env.HELM_TEST_TIMEOUT }}

      - name: Debug cluster status after helm test
        if: always() && steps.helm_test.outcome != 'skipped'
        run: |
          kubectl logs -l app.kubernetes.io/component=dtas --tail=-1
          kubectl get all --all-namespaces
          kubectl describe pod

      - name: Collect logs from all containers
        if: always() && steps.helm_install.outcome != 'skipped'
        run: |
          mkdir -p logs
          for pod in $(kubectl get pods -n default -o jsonpath='{.items[*].metadata.name}'); do
            kubectl logs $pod -n default > logs/${pod}.log
          done

      - name: Upload logs as artifact
        if: always() && steps.helm_install.outcome != 'skipped'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: k8s-logs-${{ matrix.arch }}-${{ matrix.edition }}
          path: logs

  aps-helm-test:
    if: ${{ inputs.aps_version != '' }}
    needs: build-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build-matrix.outputs.aps_helm_matrix_json) }}
    env:
      NAMESPACE: aps
    steps:
      - name: Setup cluster
        uses: Alfresco/alfresco-build-tools/.github/actions/setup-kind@v8.22.1
        with:
          ingress-nginx-ref: controller-v1.8.2
          metrics: "true"

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4.3.0
        with:
          version: "3.15.2"

      - name: Login to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772  # v3.4.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Quay.io
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772  # v3.4.0
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Log in to the Container registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create registries auth secret
        run: >-
          kubectl create secret generic quay-registry-secret
          --from-file=.dockerconfigjson=$HOME/.docker/config.json
          --type=kubernetes.io/dockerconfigjson
          --namespace ${{ env.NAMESPACE }}

      - name: Create namespace and license secret
        run: |
          kubectl create namespace ${{ env.NAMESPACE }}
          kubectl -n ${{ env.NAMESPACE }} create secret generic \
            --from-literal=activiti.lic="${{ secrets.APS_LICENSE }}" aps-license

      - name: Checkout aps-deployment sources
        uses: ./.github/actions/aps-deployment
        with:
          token: ${{ secrets.BOT_GITHUB_TOKEN }}

      - name: Setup helm repository
        working-directory: aps-deployment/helm/alfresco-process-services
        run: |
          helm repo add self https://alfresco.github.io/alfresco-helm-charts/
          helm repo add bitnami https://raw.githubusercontent.com/bitnami/charts/archive-full-index/bitnami/
          helm repo add elastic https://helm.elastic.co
          helm dependency build

      - name: Helm install
        id: helm_install
        run: |
          helm install aps ./aps-deployment/helm/alfresco-process-services \
            --set alfresco-activiti.license.secretName=aps-license \
            --values ./aps-deployment/helm/alfresco-process-services/values.yaml \
            --values ./aps-deployment/tests/ci-values.yaml \
            --values test/helm/aps-test-overrides-${{ matrix.edition }}.yaml \
            --namespace ${{ env.NAMESPACE }}

      - name: Wait for pods to be ready
        uses: Alfresco/alfresco-build-tools/.github/actions/kubectl-wait@v8.22.1
        with:
          namespace: ${{ env.NAMESPACE }}

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          repository: Alfresco/alfresco-deployment-test-automation-scripts
          path: dtas
          token: ${{ secrets.BOT_GITHUB_TOKEN }}
          ref: v1.5.5

      - uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38  # v5.4.0
        with:
          python-version: 3.9

      - name: run DTAS minimal tests
        working-directory: dtas
        run: |
          pip install -r requirements.txt
          pytest ./tests/ -k test_process \
          --verbose --configuration=./aps-deployment/dtas.json
