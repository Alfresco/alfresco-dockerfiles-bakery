name: CI

on:
  workflow_call:
    inputs:
      aps_version:
        description: 'Version of APS to build'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  REGISTRY_NAMESPACE: alfresco

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: Alfresco/alfresco-build-tools/.github/actions/free-hosted-runner-disk-space@v8.22.1

      - name: Setup nexus authentication
        env:
          NETRC_PATH: ~/.netrc
        run: |
          touch ${{ env.NETRC_PATH }}
          chmod 600 ${{ env.NETRC_PATH }}
          echo "machine nexus.alfresco.com" >> ${{ env.NETRC_PATH }}
          echo "login ${{ secrets.NEXUS_USERNAME }}" >> ${{ env.NETRC_PATH }}
          echo "password ${{ secrets.NEXUS_PASSWORD }}" >> ${{ env.NETRC_PATH }}

      - name: Restore packages artifacts
        uses: actions/cache/restore@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        id: artifacts-cache
        env:
          HASH_FILES_NAME: '**/artifacts-${{ inputs.aps_version }}*.yaml'
        with:
          key: ${{ runner.os }}-packages-v2-${{ hashFiles(env.HASH_FILES_NAME) }}-${{ inputs.aps_version }}
          path: artifacts_cache/**

      - name: Fetch artifacts with test from nexus
        run: |
          python3 ./scripts/fetch_artifacts.py "**/artifacts-${{ inputs.aps_version }}-aps.yaml"

      - name: Save packages artifacts
        if: steps.artifacts-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          key: ${{ steps.artifacts-cache.outputs.cache-primary-key }}
          path: artifacts_cache/**

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Login to Quay.io
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Log in to the Container registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

      - name: Collect Workflow Telemetry
        uses: catchpoint/workflow-telemetry-action@94c3c3d9567a0205de6da68a76c428ce4e769af1 # v2.0.0
        with:
          comment_on_pr: false

      - name: Enumerate bake targets
        id: bake-targets
        env:
          APS_VERSION: ${{ inputs.aps_version }}
        uses: docker/bake-action/subaction/list-targets@37816e747588cb137173af99ab33873600c46ea8  # v6.8.0
        with:
          target: aps

      - name: Enumerate registry cache targets
        id: cache-targets
        env:
          CACHE_TARGET: ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/bakery-cache
        run: |
          echo 'cache-set<<EOF' >> $GITHUB_OUTPUT
          echo '${{ steps.bake-targets.outputs.targets }}' | jq -r '.[] | '\
          '"\(.).cache-from=type=registry,ref=${{ env.CACHE_TARGET }}:${{ inputs.tag }}-\(.)\n'\
          '\(.).cache-from=type=registry,ref=${{ env.CACHE_TARGET }}:${{ github.event.repository.default_branch }}-v${{ inputs.aps_version }}-\(.)\n'\
          '\(.).cache-to=type=registry,ref=${{ env.CACHE_TARGET }}:${{ inputs.tag }}-\(.)"' >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Determine the tomcat version
        env:
          TOMCAT_VERSIONS_FILE: "tomcat/tomcat_versions.yaml"
        run: |
          echo "TOMCAT_MAJOR=$(yq e ".tomcat10.major" ${{ env.TOMCAT_VERSIONS_FILE }})" >> $GITHUB_ENV
          echo "TOMCAT_VERSION=$(yq e ".tomcat10.version" ${{ env.TOMCAT_VERSIONS_FILE }})" >> $GITHUB_ENV
          echo "TOMCAT_SHA512=$(yq e ".tomcat10.sha512"  ${{ env.TOMCAT_VERSIONS_FILE }})" >> $GITHUB_ENV

      - name: Bake Docker images
        env:
          APS_VERSION: ${{ inputs.aps_version }}
          TARGETARCH: 'linux/amd64'
        uses: docker/bake-action@37816e747588cb137173af99ab33873600c46ea8  # v6.8.0
        with:
          targets: aps
          source: .
          set: |
            *.output=type=registry,push=true
            ${{ steps.cache-targets.outputs.cache-set }}
  aps-helm-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Prepare for helm installation
        uses: ./.github/actions/helm-prepare
        with:
          docker-username: ${{ secrets.DOCKER_USERNAME }}
          docker-password: ${{ secrets.DOCKER_PASSWORD }}
          quay-username: ${{ secrets.QUAY_USERNAME }}
          quay-password: ${{ secrets.QUAY_PASSWORD }}
          github-registry: ${{ env.REGISTRY }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          github-actor: ${{ github.actor }}

      - name: Create license secret
        run: |
          kubectl create secret generic \
            --from-literal=activiti.lic="${{ secrets.APS_LICENSE }}" aps-license

      - name: Checkout aps-deployment sources
        uses: ./.github/actions/aps-deployment
        with:
          token: ${{ secrets.BOT_GITHUB_TOKEN }}

      - name: Setup helm repository
        working-directory: aps-deployment/helm/alfresco-process-services
        run: |
          helm repo add self https://alfresco.github.io/alfresco-helm-charts/
          helm repo add bitnami https://raw.githubusercontent.com/bitnami/charts/archive-full-index/bitnami/
          helm repo add elastic https://helm.elastic.co
          helm dependency build

      - name: Helm install
        id: helm_install
        run: |
          helm install aps ./aps-deployment/helm/alfresco-process-services \
            --set alfresco-activiti.license.secretName=aps-license \
            --set global.alfrescoRegistryPullSecrets=regcred \
            --values ./aps-deployment/tests/ci-values.yaml \
            --values test/helm/aps-test-overrides-${{ inputs.aps_version }}.yaml

      - name: Wait for pods to be ready
        uses: Alfresco/alfresco-build-tools/.github/actions/kubectl-wait@v8.22.1

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          repository: Alfresco/alfresco-deployment-test-automation-scripts
          path: dtas
          token: ${{ secrets.BOT_GITHUB_TOKEN }}
          ref: v1.7.2

      - name: Test alfresco via DTAS
        uses: ./dtas
        with:
          pytest_options: "-k test_process"
          test_config_file: test/configs/aps-dtas-${{ inputs.aps_version }}.json
          pytest_retries: 1

      - name: Collect and push logs as artifcact
        if: always() && steps.helm_install.outcome != 'skipped'
        uses: Alfresco/alfresco-build-tools/.github/actions/kubectl-keep-nslogs@v8.24.0
        with:
          log_retention: 7
          log_name_identifier: "APS-Version-${{ inputs.aps_version }}"
