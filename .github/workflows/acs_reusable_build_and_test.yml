name: CI

on:
  workflow_call:
    inputs:
      tag:
        description: 'Tag for the Docker images'
        required: true
        type: string
      acs_version:
        description: 'Version of ACS to build'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  REGISTRY_NAMESPACE: alfresco
  TAG: ${{ inputs.tag }}

jobs:
  build:
    if: github.actor != 'dependabot[bot]'
    uses: ./.github/workflows/reusable_bake_build.yml
    with:
      version: ${{ inputs.acs_version }}
      bake-targets: default
      tag: ${{ inputs.tag }}
      artifacts-to-fetch: '**/artifacts-${{ inputs.acs_version }}*.yaml'
    secrets: inherit
  build-matrix:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      compose_matrix_json: ${{ steps.set-matrix.outputs.compose_matrix_json }}
      helm_matrix_json: ${{ steps.set-matrix.outputs.helm_matrix_json }}
    steps:
      - name: Set matrix values for Compose and Helm
        id: set-matrix
        run: |
          case "${{ inputs.acs_version }}" in
            25)
              echo 'compose_matrix_json={"edition": ["enterprise", "community"]}' >> $GITHUB_OUTPUT
              echo 'helm_matrix_json={"arch": ["arm64", "amd64"], "edition": ["enterprise", "community"]}' >> $GITHUB_OUTPUT
              ;;
            23)
              echo 'compose_matrix_json={"edition": ["23"]}' >> $GITHUB_OUTPUT
              echo 'helm_matrix_json={"arch": ["arm64", "amd64"], "edition": ["23"]}' >> $GITHUB_OUTPUT
              ;;
            74)
              echo 'compose_matrix_json={"edition": ["74"]}' >> $GITHUB_OUTPUT
              echo 'helm_matrix_json={"arch": ["amd64"], "edition": ["74"]}' >> $GITHUB_OUTPUT
              ;;
            73)
              echo 'compose_matrix_json={"edition": ["73"]}' >> $GITHUB_OUTPUT
              echo 'helm_matrix_json={"arch": ["amd64"], "edition": ["73"]}' >> $GITHUB_OUTPUT
              ;;
          esac

  compose-test:
    needs: build-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build-matrix.outputs.compose_matrix_json) }}
    env:
      MERGED_COMPOSE_PATH: test/merged-compose.yaml
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Login to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772  # v3.4.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to the Container registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout acs-deployment sources
        uses: ./.github/actions/acs-deployment

      - name: Set path to compose files
        id: set-compose-path
        run: |
          case "${{ matrix.edition }}" in
            enterprise)
              echo "UPSTREAM_COMPOSE_PATH=compose.yaml" >> $GITHUB_ENV
              echo "OVERRIDE_COMPOSE_PATH=enterprise-override.yaml" >> $GITHUB_ENV
              ;;
            23)
              echo "UPSTREAM_COMPOSE_PATH=23.N-compose.yaml" >> $GITHUB_ENV
              echo "OVERRIDE_COMPOSE_PATH=enterprise-override.yaml" >> $GITHUB_ENV
              ;;
            74)
              echo "UPSTREAM_COMPOSE_PATH=7.4.N-compose.yaml" >> $GITHUB_ENV
              echo "OVERRIDE_COMPOSE_PATH=solr-search-override.yaml" >> $GITHUB_ENV
              ;;
            73)
              echo "UPSTREAM_COMPOSE_PATH=7.3.N-compose.yaml" >> $GITHUB_ENV
              echo "OVERRIDE_COMPOSE_PATH=solr-search-override.yaml" >> $GITHUB_ENV
              ;;
            community)
              echo "UPSTREAM_COMPOSE_PATH=community-compose.yaml" >> $GITHUB_ENV
              echo "OVERRIDE_COMPOSE_PATH=community-override.yaml" >> $GITHUB_ENV
              ;;
          esac

      - name: Merge Docker Compose files
        run: |
          cp -r acs-deployment/docker-compose/* test/
          docker compose -f test/${{ env.UPSTREAM_COMPOSE_PATH }} -f test/${{ env.OVERRIDE_COMPOSE_PATH }} config > ${{ env.MERGED_COMPOSE_PATH }}
          cat ${{ env.MERGED_COMPOSE_PATH }}

      - name: Verify docker-compose (${{ matrix.edition }})
        id: verify_compose
        uses: Alfresco/alfresco-build-tools/.github/actions/dbp-charts/verify-compose@v8.22.1
        timeout-minutes: 10
        with:
          postman_path: test/postman/docker-compose
          postman_json: acs-test-docker-compose-collection.json
          compose_file_path: ${{ env.MERGED_COMPOSE_PATH }}
          quay_username: ${{ secrets.QUAY_USERNAME }}
          quay_password: ${{ secrets.QUAY_PASSWORD }}

      - name: Save containers logs (${{ matrix.edition }})
        if: always() && steps.verify_compose.outcome != 'skipped'
        uses: Alfresco/alfresco-build-tools/.github/actions/docker-dump-containers-logs@v8.22.1
        with:
          output-archive-name: compose-${{ matrix.edition }}-logs-${{ inputs.acs_version }}

  helm-test:
    needs: build-matrix
    runs-on: ${{ matrix.arch == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build-matrix.outputs.helm_matrix_json) }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Prepare for helm installation
        uses: ./.github/actions/helm-prepare
        with:
          docker-username: ${{ secrets.DOCKER_USERNAME }}
          docker-password: ${{ secrets.DOCKER_PASSWORD }}
          quay-username: ${{ secrets.QUAY_USERNAME }}
          quay-password: ${{ secrets.QUAY_PASSWORD }}
          github-registry: ${{ env.REGISTRY }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          github-actor: ${{ github.actor }}

      - name: Create configmaps for adf apps
        run: |
          kubectl create configmap acc-config --from-file=app.config.json=test/configs/acc.json
          kubectl create configmap adw-config --from-file=app.config.json=test/configs/adw.json

      - name: Checkout acs-deployment sources
        uses: ./.github/actions/acs-deployment

      - name: Setup helm repository
        working-directory: acs-deployment/helm/alfresco-content-services
        run: |
          helm repo add self https://alfresco.github.io/alfresco-helm-charts/
          helm repo add activiti https://activiti.github.io/activiti-cloud-helm-charts
          helm repo add bitnami https://raw.githubusercontent.com/bitnami/charts/archive-full-index/bitnami/
          helm repo add elastic https://helm.elastic.co
          helm dependency build

      - name: Preprocess test-overrides.yaml
        env:
          OVERRIDES_VALUES_FILE: test/helm/test-overrides.yaml
        run: |
          sed -i "s|localhost/alfresco/|${REGISTRY}/${REGISTRY_NAMESPACE}/|g" ${{ env.OVERRIDES_VALUES_FILE }}
          sed -i "s|tag: latest|tag: ${TAG}|g" ${{ env.OVERRIDES_VALUES_FILE }}

          if [ "${{ matrix.edition }}" = "community" ]; then
            sed -i "s|/alfresco-content-repository|/alfresco-content-repository-community|g" ${{ env.OVERRIDES_VALUES_FILE }}
            sed -i "s|/alfresco-share|/alfresco-share-community|g" ${{ env.OVERRIDES_VALUES_FILE }}
          fi

          cat ${{ env.OVERRIDES_VALUES_FILE }}

      - name: Set path to compose files
        id: set-helm-values
        run: |
          case "${{ matrix.edition }}" in
            enterprise)
              echo "UPSTREAM_HELM_VALUES=values.yaml" >> $GITHUB_ENV
              ;;
            23)
              echo "UPSTREAM_HELM_VALUES=23.N_values.yaml" >> $GITHUB_ENV
              ;;
            74)
              echo "UPSTREAM_HELM_VALUES=7.4.N_values.yaml" >> $GITHUB_ENV
              ;;
            73)
              echo "UPSTREAM_HELM_VALUES=7.3.N_values.yaml" >> $GITHUB_ENV
              ;;
            community)
              echo "UPSTREAM_HELM_VALUES=community_values.yaml" >> $GITHUB_ENV
              ;;
          esac

      - name: Helm install
        id: helm_install
        run: |
          helm install acs ./acs-deployment/helm/alfresco-content-services \
            --set global.search.sharedSecret="$(openssl rand -hex 24)" \
            --values ./acs-deployment/helm/alfresco-content-services/${{ env.UPSTREAM_HELM_VALUES }} \
            --values ./acs-deployment/test/${{ matrix.edition == 'community' && 'community' || 'enterprise' }}-integration-test-values.yaml \
            --values test/helm/test-overrides.yaml \
            --values test/helm/test-overrides-${{ matrix.edition }}.yaml

      - name: Wait for pods to be ready
        uses: Alfresco/alfresco-build-tools/.github/actions/kubectl-wait@v8.22.1

      - name: Run helm test
        id: helm_test
        env:
          HELM_TEST_TIMEOUT: 20m
        run: helm test acs --timeout=${{ env.HELM_TEST_TIMEOUT }}

      - name: Debug cluster status after helm test
        if: always() && steps.helm_test.outcome != 'skipped'
        run: |
          kubectl logs -l app.kubernetes.io/component=dtas --tail=-1
          kubectl get all --all-namespaces
          kubectl describe pod

      - name: Collect logs from all containers
        if: always() && steps.helm_install.outcome != 'skipped'
        run: |
          mkdir -p logs
          for pod in $(kubectl get pods -n default -o jsonpath='{.items[*].metadata.name}'); do
            kubectl logs $pod -n default > logs/${pod}.log
          done

      - name: Upload logs as artifact
        if: always() && steps.helm_install.outcome != 'skipped'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: k8s-logs-${{ matrix.arch }}-${{ matrix.edition }}
          path: logs
