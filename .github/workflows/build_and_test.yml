name: Build, Run and Test Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  ACS_CHART_VERSION: 8.3.0
  ACS_VALUES_VERSION: cfb0d426eff14a8b581c31e61db5e670da09ba3b
  ARTIFACT_NAME: alfresco-docker-images

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: Alfresco/alfresco-build-tools/.github/actions/pre-commit@v6.0.0
        with:
          auto-commit: "true"

  build-test:
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - uses: Alfresco/alfresco-build-tools/.github/actions/free-hosted-runner-disk-space@v5.34.0

      - name: Setup nexus authentication
        run: |
          echo "machine nexus.alfresco.com" >> ~/.netrc
          echo "login ${{ secrets.NEXUS_USERNAME }}" >> ~/.netrc
          echo "password ${{ secrets.NEXUS_PASSWORD }}" >> ~/.netrc

      - name: Fetch artifacts from nexus
        run: ./scripts/fetch-artifact.sh

      - name: Set up QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1

      - name: Login to Quay.io
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Collect Workflow Telemetry
        uses: catchpoint/workflow-telemetry-action@v2
        with:
          comment_on_pr: false

      - name: Bake Docker images
        uses: docker/bake-action@a4d7f0b5b91c14a296d792d4ec53a9db17f02e67  # v5.5.0

      - name: Show all built images
        run: docker images

      - name: Docker save all baked images whose name include `alfresco`
        run: |
          docker save -o /tmp/${{ env.ARTIFACT_NAME }}.tar $(docker images --format "{{.Repository}}:{{.Tag}}" | grep alfresco)

      - name: Check disk space
        run: df -h
        if: always()

      - name: Upload images as artifact
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: /tmp/${{ env.ARTIFACT_NAME }}.tar
          retention-days: 1
          compression-level: 0

  compose-test:
    name: compose-test
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db  # v3.6.1
    
      - name: Download artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: /tmp
          name: ${{ env.ARTIFACT_NAME }}

      - name: Load Docker images
        run: |
          docker load -i /tmp/${{ env.ARTIFACT_NAME }}.tar
          docker image ls -a

      - name: Verify docker-compose
        uses: Alfresco/alfresco-build-tools/.github/actions/dbp-charts/verify-compose@v6.0.1
        timeout-minutes: 10
        with:
          compose_pull: false
          compose_file_path: test/docker-compose.yml
          quay_username: ${{ secrets.QUAY_USERNAME }}
          quay_password: ${{ secrets.QUAY_PASSWORD }}

      - uses: Alfresco/alfresco-build-tools/.github/actions/docker-dump-containers-logs@v6.0.0

  helm-test:
    name: helm test
    needs: build-test
    runs-on: alfrescoPub-ubuntu2204-16G-4CPU
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: /tmp
          name: ${{ env.ARTIFACT_NAME }}

      - name: Setup cluster
        uses: Alfresco/alfresco-build-tools/.github/actions/setup-kind@v5.35.0
        with:
          ingress-nginx-ref: controller-v1.8.2
          metrics: "true"

      - name: Load Docker images
        run: |
          kind load image-archive -n chart-testing /tmp/${{ env.ARTIFACT_NAME }}.tar

      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - uses: azure/setup-helm@fe7b79cd5ee1e45176fcad797de68ecaf3ca4814 # v4.2.0
        with:
          version: "3.15.2"

      - name: Login to Quay.io
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20  # v3.1.0
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Create registries auth secret
        run: >-
          kubectl create secret generic regcred
          --from-file=.dockerconfigjson=$HOME/.docker/config.json
          --type=kubernetes.io/dockerconfigjson

      - name: Fetch upstream values for tests
        run: >-
          curl -ssfL
          https://raw.githubusercontent.com/Alfresco/acs-deployment/${{ env.ACS_VALUES_VERSION }}/test/enterprise-integration-test-values.yaml
          -o test/helm/enterprise-integration-test-values.yaml &&
          ls -l test/helm/enterprise-integration-test-values.yaml &&
          cat test/helm/enterprise-integration-test-values.yaml

      - name: Helm install
        id: helm_install
        run: |
          helm repo add alfresco https://kubernetes-charts.alfresco.com/stable
          helm repo update
          helm install acs alfresco/alfresco-content-services \
            --version ${{ env.ACS_CHART_VERSION }} \
            --set global.search.sharedSecret="$(openssl rand -hex 24)" \
            --set global.known_urls=http://localhost \
            --set global.alfrescoRegistryPullSecrets=regcred \
            --values test/helm/enterprise-integration-test-values.yaml \
            --values test/helm/test-overrides.yaml

      - name: Watch Helm deployment
        env:
          HELM_INSTALL_TIMEOUT: 10m
        run: |
          kubectl get pods --watch &
          KWPID=$!
          kubectl wait --timeout=${{ env.HELM_INSTALL_TIMEOUT }} --all=true --for=condition=Ready pods
          kill $KWPID
          echo "Waiting for ESC Reindexing job to complete... "
          kubectl wait --timeout=5m --for=condition=complete job/acs-alfresco-search-enterprise-reindexing

      - name: Debug cluster status after install
        if: always() && steps.helm_install.outcome != 'skipped'
        run: |
          helm ls --all-namespaces --all
          kubectl get all --all-namespaces
          kubectl describe pod

      - name: Run helm test
        id: helm_test
        run: helm test acs

      - name: Debug cluster status after helm test
        if: always() && steps.helm_test.outcome != 'skipped'
        run: |
          kubectl logs -l app.kubernetes.io/component=dtas --tail=-1
          kubectl get all --all-namespaces
          kubectl describe pod
